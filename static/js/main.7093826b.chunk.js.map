{"version":3,"sources":["SortingAlgorithms/MergeSort.js","SortingVisualizer/VisualizeHelper.js","SortingAlgorithms/QuickSort.js","SortingAlgorithms/HeapSort.js","SortingVisualizer/SortingVisualizer.jsx","SortingAlgorithms/BubbleSort.js","App.js","reportWebVitals.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","array_size","c_delay","bar_update","cont","height","color","window","setTimeout","style","Quick","arrayBars","array_sizes","quick_sort","start","end","piv_pos","piv","temp","t","quick_partition","Heap","max_heapify","swap","heap_sort","n","largest","l","r","PRIMARY_COLOR","SortingVisualizer","props","handleClick","bind","state","algorithm","updateAlgorithm","this","resetArray","mergeSort","quickSort","heapSort","bubbleSort","numarrayBars","min","max","screen","width","random","setState","document","getElementsByClassName","backgroundColor","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","newHeight","Bubble","isRunning","className","map","value","idx","onClick","valid","setAlgorithm","sort","React","Component","querySelectorAll","forEach","item","addEventListener","elem","getElemWithClass","querySelector","classList","remove","add","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7093826b.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n    return animations;\r\n  }\r\n\r\nfunction mergeSortHelper(\r\n    mainArray,\r\n    startIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n  ) {\r\n    if (startIdx === endIdx) return;\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n    }\r\n  \r\nfunction doMerge(\r\n    mainArray,\r\n    startIdx,\r\n    middleIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n  ) {\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n    while (i <= middleIdx && j <= endIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([i, j]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([i, j]);\r\n      if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index i in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[i]]);\r\n        mainArray[k++] = auxiliaryArray[i++];\r\n      } else {\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index j in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[j]]);\r\n        mainArray[k++] = auxiliaryArray[j++];\r\n      }\r\n    }\r\n    while (i <= middleIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([i, i]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([i, i]);\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index i in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    }\r\n    while (j <= endIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([j, j]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([j, j]);\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index j in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }","//We only have to change background-color and height of the sorting element.\r\n\r\nvar speed=1000;\r\n\r\nvar array_size = 249;\r\n\r\nvar delay_time=10000/(Math.floor(array_size/10)*speed);        //Decrease numerator to increase speed.\r\nvar c_delay=0;//This is updated ov every div change so that visualization is visible.\r\n\r\nexport function bar_update(cont,height,color)\r\n{\r\n    window.setTimeout(function(){\r\n        cont.style= \"background-color:\" + color + \";\" +\"height:\" + `${height}px`;\r\n    },c_delay+=5);\r\n}\r\n\r\n/*function enable_buttons()\r\n{\r\n    window.setTimeout(function(){\r\n        for(var i=0;i<butts_algos.length;i++)\r\n        {\r\n            butts_algos[i].classList=[];\r\n            butts_algos[i].classList.add(\"butt_unselected\");\r\n\r\n            butts_algos[i].disabled=false;\r\n            inp_as.disabled=false;\r\n            inp_gen.disabled=false;\r\n            inp_aspeed.disabled=false;\r\n        }\r\n    },c_delay+=delay_time);\r\n}*/\r\n","import {bar_update} from '../SortingVisualizer/VisualizeHelper.js';\r\nexport function Quick(arrayBars, array_sizes)\r\n{\r\n    var c_delay=0;\r\n    \r\n\r\n    quick_sort(0,array_sizes.length-1, arrayBars, array_sizes);\r\n\r\n    //enable_buttons();\r\n}\r\n\r\nfunction quick_partition (arrayBars, array_sizes, start, end)\r\n{\r\n    var i = start + 1;\r\n    var piv = array_sizes[start]; //make the first element as pivot element.\r\n    bar_update(arrayBars[start],array_sizes[start],\"yellow\");//Color update\r\n\r\n        for(var j =start + 1; j <= end ; j++ )\r\n        {\r\n            //re-arrange the array by putting elements which are less than pivot on one side and which are greater that on other.\r\n            if (array_sizes[ j ] < piv)\r\n            {\r\n                bar_update(arrayBars[j],array_sizes[j],\"yellow\");//Color update\r\n\r\n                bar_update(arrayBars[i],array_sizes[i],\"red\");//Color update\r\n                bar_update(arrayBars[j],array_sizes[j],\"red\");//Color update\r\n\r\n                var temp=array_sizes[i];\r\n                array_sizes[i]=array_sizes[j];\r\n                array_sizes[j]=temp;\r\n\r\n                bar_update(arrayBars[i],array_sizes[i],\"red\");//Height update\r\n                bar_update(arrayBars[j],array_sizes[j],\"red\");//Height update\r\n\r\n                bar_update(arrayBars[i],array_sizes[i],\"turquoise\");//Height update\r\n                bar_update(arrayBars[j],array_sizes[j],\"turquoise\");//Height update\r\n\r\n                i += 1;\r\n            }\r\n    }\r\n    bar_update(arrayBars[start],array_sizes[start],\"red\");//Color update\r\n    bar_update(arrayBars[i-1],array_sizes[i-1],\"red\");//Color update\r\n    \r\n    var temp=array_sizes[start];//put the pivot element in its proper place.\r\n    array_sizes[start]=array_sizes[i-1];\r\n    array_sizes[i-1]=temp;\r\n\r\n    bar_update(arrayBars[start],array_sizes[start],\"red\");//Height update\r\n    bar_update(arrayBars[i-1],array_sizes[i-1],\"red\");//Height update\r\n\r\n    for(var t=start;t<=i;t++)\r\n    {\r\n      bar_update(arrayBars[t],array_sizes[t],\"green\");//Color update\r\n    }\r\n\r\n    return i-1;//return the position of the pivot\r\n}\r\n\r\nfunction quick_sort (start, end, arrayBars, array_sizes )\r\n{\r\n    if( start < end )\r\n    {\r\n        //stores the position of pivot element\r\n        var piv_pos = quick_partition (arrayBars, array_sizes, start, end ) ;     \r\n        quick_sort (start, piv_pos -1, arrayBars, array_sizes);//sorts the left side of pivot.\r\n        quick_sort (piv_pos +1, end, arrayBars, array_sizes) ;//sorts the right side of pivot.\r\n    }\r\n }","import {bar_update} from '../SortingVisualizer/VisualizeHelper.js';\r\nexport function Heap(arrayBars, array_sizes)\r\n{\r\n    var c_delay=0;\r\n\r\n    heap_sort(array_sizes.length, arrayBars, array_sizes);\r\n    \r\n    //enable_buttons();\r\n}\r\n\r\nfunction swap(i,j, arrayBars, array_sizes)\r\n{\r\n    bar_update(arrayBars[i],array_sizes[i],\"red\");//Color update\r\n    bar_update(arrayBars[j],array_sizes[j],\"red\");//Color update\r\n\r\n    var temp=array_sizes[i];\r\n    array_sizes[i]=array_sizes[j];\r\n    array_sizes[j]=temp;\r\n\r\n    bar_update(arrayBars[i],array_sizes[i],\"red\");//Height update\r\n    bar_update(arrayBars[j],array_sizes[j],\"red\");//Height update\r\n\r\n    bar_update(arrayBars[i],array_sizes[i],\"turquoise\");//Color update\r\n    bar_update(arrayBars[j],array_sizes[j],\"turquoise\");//Color update\r\n}\r\n\r\nfunction max_heapify(n,i,arrayBars, array_sizes)\r\n{\r\n    var largest=i;\r\n    var l=2*i+1;\r\n    var r=2*i+2;\r\n\r\n    if(l<n && array_sizes[l]>array_sizes[largest])\r\n    {\r\n        if(largest!=i)\r\n        {\r\n            bar_update(arrayBars[largest],array_sizes[largest],\"blue\");//Color update\r\n        }\r\n\r\n        largest=l;\r\n\r\n        bar_update(arrayBars[largest],array_sizes[largest],\"red\");//Color update\r\n    }\r\n\r\n    if(r<n && array_sizes[r]>array_sizes[largest])\r\n    {\r\n        if(largest!=i)\r\n        {\r\n            bar_update(arrayBars[largest],array_sizes[largest],\"turquoise\");//Color update\r\n        }\r\n\r\n        largest=r;\r\n\r\n        bar_update(arrayBars[largest],array_sizes[largest],\"red\");//Color update\r\n    }\r\n\r\n    if(largest!=i)\r\n    {\r\n        swap(i,largest, arrayBars, array_sizes);\r\n\r\n        max_heapify(n,largest, arrayBars, array_sizes);\r\n    }\r\n}\r\n\r\nfunction heap_sort(array_size, arrayBars, array_sizes)\r\n{\r\n    for(var i=Math.floor(array_size/2)-1;i>=0;i--)\r\n    {\r\n        max_heapify(array_size,i, arrayBars,array_sizes);\r\n    }\r\n\r\n    for(var i=array_size-1;i>0;i--)\r\n    {\r\n        swap(0,i, arrayBars, array_sizes);\r\n        bar_update(arrayBars[i],array_sizes[i],\"green\");//Color update\r\n        bar_update(arrayBars[i],array_sizes[i],\"yellow\");//Color update\r\n\r\n        max_heapify(i,0, arrayBars, array_sizes);\r\n\r\n        bar_update(arrayBars[i],array_sizes[i],\"turquoise\");//Color update\r\n        bar_update(arrayBars[i],array_sizes[i],\"green\");//Color update\r\n    }\r\n    bar_update(arrayBars[i],array_sizes[i],\"green\");//Color update\r\n}\r\n","import React from 'react';\r\nimport {getMergeSortAnimations} from '../SortingAlgorithms/MergeSort.js';\r\nimport {Quick} from '../SortingAlgorithms/QuickSort.js';\r\nimport {Heap}  from '../SortingAlgorithms/HeapSort.js';\r\nimport {Bubble} from '../SortingAlgorithms/BubbleSort.js';\r\nimport { bar_update } from './VisualizeHelper.js';\r\nimport './SortingVisualizer.css';\r\n\r\n// Change this value for the speed of the animations.\r\nconst ANIMATION_SPEED_MS = 2;\r\n\r\n// Change this value for the number of bars (value) in the array.\r\nconst NUMBER_OF_ARRAY_BARS = 250;\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = 'turquoise';\r\n\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = 'red';\r\n\r\nexport default class SortingVisualizer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleClick = this.handleClick.bind(this);\r\n    this.state = {\r\n      array: [],\r\n      \r\n    };\r\n\r\n    \r\n  }\r\n\r\n  handleClick(algorithm) {\r\n    const { updateAlgorithm } = this.props;\r\n\r\n    updateAlgorithm(algorithm);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.resetArray();\r\n  }\r\n\r\n  sort(algorithm) {\r\n    switch(algorithm) {\r\n      case \"mergeSort\":\r\n       this.mergeSort();\r\n       break;\r\n       case \"quickSort\":\r\n         this.quickSort();\r\n        break;\r\n        case \"heapSort\":\r\n          this.heapSort();\r\n        break;\r\n        case \"bubbleSort\":\r\n          this.bubbleSort();\r\n        break;\r\n        default:\r\n        break;\r\n\r\n    }\r\n  }\r\n\r\n  \r\n\r\n  resetArray() {\r\n    const array = [];\r\n    var height;\r\n    var numarrayBars;\r\n    if (window.screen.width < 500 ){\r\n      height = 700;\r\n      numarrayBars = 65;\r\n    }\r\n    else {\r\n      height = 750;\r\n      numarrayBars = 250;\r\n    }\r\n    for (let i = 0; i < numarrayBars; i++) {\r\n      array.push(randomIntFromInterval(5, height));\r\n    }\r\n   \r\n    this.setState({array});\r\n\r\n    const arrayBars = document.getElementsByClassName('array-bar');\r\n    for (let i = 0; i < arrayBars.length; i++){\r\n      arrayBars[i].style.backgroundColor = PRIMARY_COLOR;\r\n\r\n    }\r\n    \r\n  }\r\n\r\n  mergeSort() {\r\n    const animations = getMergeSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      const isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n          barOneStyle.backgroundColor = 'green';\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.height = `${newHeight}px`;\r\n          barOneStyle.backgroundColor = 'green';\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n  }\r\n\r\n  quickSort() {\r\n    const arrayBars = document.getElementsByClassName('array-bar');\r\n    Quick(arrayBars, this.state.array);\r\n  }\r\n\r\n  heapSort() {\r\n    const arrayBars = document.getElementsByClassName('array-bar');\r\n    Heap(arrayBars, this.state.array);\r\n  }\r\n\r\n  bubbleSort() {\r\n    const arrayBars = document.getElementsByClassName('array-bar');\r\n    Bubble(arrayBars, this.state.array);\r\n  }\r\n\r\n  \r\n  setAlgorithm(algorithm) {\r\n    this.setState({algorithm});\r\n  }\r\n\r\n  \r\n\r\n\r\n  render() {\r\n    const {\r\n      array,\r\n      algorithm,\r\n      isRunning\r\n    } = this.state;\r\n\r\n\r\n    const color = isRunning ? \"rgba(214, 29, 29, 0.8)\" : \"white\";\r\n\r\n    const cursor = isRunning ? \"auto\" : \"pointer\";\r\n\r\n    return (\r\n      <div className=\"array-container\">\r\n        {array.map((value, idx) => (\r\n          <div\r\n            className=\"array-bar\"\r\n            key={idx}\r\n            style={{\r\n              backgroundColor: PRIMARY_COLOR,\r\n              height: `${value}px`\r\n            }}></div>\r\n        ))}\r\n        <nav>\r\n\r\n            \r\n            <li className=\"nav__link\">\r\n                    <button className=\"\r\n                    nav_link--anchor\r\n                    nav_link--anchor-primary\r\n                    newarray\r\n                    \"\r\n                    onClick={() => this.resetArray()}>Generate New Array</button>\r\n                </li>\r\n           \r\n                <li className=\"nav__link\">\r\n                    <button className={`\r\n                    nav_link--anchor\r\n                    link__hover-effect\r\n                    link__hover-effect--black\r\n                    astext ${this.state.valid ? 'activeAlg' : 'null'}\r\n                    ${algorithm === \"mergeSort\" ? \"currentAlgorithmButton\" : \"algorithmButton\"}\r\n                    `}\r\n                    onClick={() => this.setAlgorithm(\"mergeSort\")}>\r\n                    Merge Sort</button>\r\n                </li>\r\n\r\n                <li className=\"nav__link\">\r\n                    <button className={`\r\n                    nav_link--anchor\r\n                    link__hover-effect\r\n                    link__hover-effect--black\r\n                    astext ${this.state.valid ? 'activeAlg' : 'null'}\r\n                    ${algorithm === \"quickSort\" ? \"currentAlgorithmButton\" : \"algorithmButton\"}\r\n                    `}\r\n                    onClick={() => this.setAlgorithm(\"quickSort\")}>\r\n                    Quick Sort</button>\r\n                </li>\r\n\r\n                <li className=\"nav__link\">\r\n                    <button className={`\r\n                    nav_link--anchor\r\n                    link__hover-effect\r\n                    link__hover-effect--black\r\n                    astext ${this.state.valid ? 'activeAlg' : 'null'}\r\n                    ${algorithm === \"heapSort\" ? \"currentAlgorithmButton\" : \"algorithmButton\"}\r\n                    `}\r\n                    onClick={() => this.setAlgorithm(\"heapSort\")}>\r\n                    Heap Sort</button>\r\n                </li>\r\n\r\n                <li className=\"nav__link\">\r\n                    <button className={`\r\n                    nav_link--anchor\r\n                    link__hover-effect\r\n                    link__hover-effect--black\r\n                    astext ${this.state.valid ? 'activeAlg' : 'null'}\r\n                    ${algorithm === \"bubbleSort\" ? \"currentAlgorithmButton\" : \"algorithmButton\"}\r\n                    `}\r\n                    onClick={() => this.setAlgorithm(\"bubbleSort\")}>\r\n                    Bubble Sort</button>\r\n                </li>\r\n            <li className=\"nav__link\">\r\n                    <button className=\"\r\n                    nav_link--anchor\r\n                    nav_link--anchor-primary\"\r\n                    onClick={() =>  this.sort(algorithm)}\r\n                    >Sort!</button>\r\n                    \r\n                </li>\r\n            \r\n        </nav>\r\n       \r\n      </div>\r\n      \r\n      \r\n      \r\n    );\r\n  }\r\n}\r\n\r\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\r\nfunction randomIntFromInterval(min, max) {\r\n  // min and max included\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nfunction arraysAreEqual(arrayOne, arrayTwo) {\r\n  if (arrayOne.length !== arrayTwo.length) return false;\r\n  for (let i = 0; i < arrayOne.length; i++) {\r\n    if (arrayOne[i] !== arrayTwo[i]) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nvar speed=1000;\r\n\r\nvar array_size = 10;\r\n\r\nvar delay_time=10000/(Math.floor(array_size/10)*speed);        //Decrease numerator to increase speed.\r\nvar c_delay=0;//This is updated ov every div change so that visualization is visible.\r\n\r\nexport function div_update(cont,height,color)\r\n{\r\n    window.setTimeout(function(){\r\n        cont.style= \"background-color:\" + color + \";\" +\"height:\" + `${height}px`;\r\n    },c_delay+=delay_time);\r\n}\r\n\r\n//get all the elements with calss list-group-item\r\n[...document.querySelectorAll('.link__hover-effect')].forEach(function(item) {\r\n    // iterate and add event lstener to each of them\r\n    item.addEventListener('click', function(elem) {\r\n      // check if any element have a class active\r\n      // if so then remove the class from it\r\n      let getElemWithClass = document.querySelector('.active');\r\n      if (getElemWithClass !== null) {\r\n        getElemWithClass.classList.remove('active');\r\n      }\r\n      //add the active class to the element from which click event triggered\r\n      item.classList.add('active')\r\n  \r\n    })\r\n  })\r\n\r\n","import {bar_update} from '../SortingVisualizer/VisualizeHelper.js';\r\nexport function Bubble(arrayBars, array_sizes)\r\n{\r\n    var c_delay=0;\r\n\r\n    for(var i=0;i<array_sizes.length-1;i++)\r\n    {\r\n        for(var j=0;j<array_sizes.length-i-1;j++)\r\n        {\r\n            bar_update(arrayBars[j],array_sizes[j],\"yellow\");//Color update\r\n\r\n            if(array_sizes[j]>array_sizes[j+1])\r\n            {\r\n                bar_update(arrayBars[j],array_sizes[j], \"red\");//Color update\r\n                bar_update(arrayBars[j+1],array_sizes[j+1], \"red\");//Color update\r\n\r\n                var temp=array_sizes[j];\r\n                array_sizes[j]=array_sizes[j+1];\r\n                array_sizes[j+1]=temp;\r\n\r\n                bar_update(arrayBars[j],array_sizes[j], \"red\");//Height update\r\n                bar_update(arrayBars[j+1],array_sizes[j+1], \"red\");//Height update\r\n            }\r\n            bar_update(arrayBars[j],array_sizes[j], \"turquoise\");//Color updat\r\n        }\r\n        bar_update(arrayBars[j],array_sizes[j], \"green\");//Color update\r\n    }\r\n    bar_update(arrayBars[0],array_sizes[0], \"green\");//Color update\r\n\r\n    //enable_buttons();\r\n}","import React from 'react';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}